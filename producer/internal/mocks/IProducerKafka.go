// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	kafka "vinnipuh1982/producer/internal/kafka"

	mock "github.com/stretchr/testify/mock"
)

// IProducerKafka is an autogenerated mock type for the IProducerKafka type
type IProducerKafka struct {
	mock.Mock
}

type IProducerKafka_Expecter struct {
	mock *mock.Mock
}

func (_m *IProducerKafka) EXPECT() *IProducerKafka_Expecter {
	return &IProducerKafka_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *IProducerKafka) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IProducerKafka_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type IProducerKafka_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *IProducerKafka_Expecter) Close() *IProducerKafka_Close_Call {
	return &IProducerKafka_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *IProducerKafka_Close_Call) Run(run func()) *IProducerKafka_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IProducerKafka_Close_Call) Return(_a0 error) *IProducerKafka_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IProducerKafka_Close_Call) RunAndReturn(run func() error) *IProducerKafka_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ProduceMessage provides a mock function with given fields: topicConfig, message
func (_m *IProducerKafka) ProduceMessage(topicConfig kafka.TopicConfig, message kafka.Message) error {
	ret := _m.Called(topicConfig, message)

	if len(ret) == 0 {
		panic("no return value specified for ProduceMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(kafka.TopicConfig, kafka.Message) error); ok {
		r0 = rf(topicConfig, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IProducerKafka_ProduceMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceMessage'
type IProducerKafka_ProduceMessage_Call struct {
	*mock.Call
}

// ProduceMessage is a helper method to define mock.On call
//   - topicConfig kafka.TopicConfig
//   - message kafka.Message
func (_e *IProducerKafka_Expecter) ProduceMessage(topicConfig interface{}, message interface{}) *IProducerKafka_ProduceMessage_Call {
	return &IProducerKafka_ProduceMessage_Call{Call: _e.mock.On("ProduceMessage", topicConfig, message)}
}

func (_c *IProducerKafka_ProduceMessage_Call) Run(run func(topicConfig kafka.TopicConfig, message kafka.Message)) *IProducerKafka_ProduceMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kafka.TopicConfig), args[1].(kafka.Message))
	})
	return _c
}

func (_c *IProducerKafka_ProduceMessage_Call) Return(_a0 error) *IProducerKafka_ProduceMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IProducerKafka_ProduceMessage_Call) RunAndReturn(run func(kafka.TopicConfig, kafka.Message) error) *IProducerKafka_ProduceMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ProduceMessageAsync provides a mock function with given fields: topicConfig, message
func (_m *IProducerKafka) ProduceMessageAsync(topicConfig kafka.TopicConfig, message kafka.AsyncMessage) {
	_m.Called(topicConfig, message)
}

// IProducerKafka_ProduceMessageAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceMessageAsync'
type IProducerKafka_ProduceMessageAsync_Call struct {
	*mock.Call
}

// ProduceMessageAsync is a helper method to define mock.On call
//   - topicConfig kafka.TopicConfig
//   - message kafka.AsyncMessage
func (_e *IProducerKafka_Expecter) ProduceMessageAsync(topicConfig interface{}, message interface{}) *IProducerKafka_ProduceMessageAsync_Call {
	return &IProducerKafka_ProduceMessageAsync_Call{Call: _e.mock.On("ProduceMessageAsync", topicConfig, message)}
}

func (_c *IProducerKafka_ProduceMessageAsync_Call) Run(run func(topicConfig kafka.TopicConfig, message kafka.AsyncMessage)) *IProducerKafka_ProduceMessageAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kafka.TopicConfig), args[1].(kafka.AsyncMessage))
	})
	return _c
}

func (_c *IProducerKafka_ProduceMessageAsync_Call) Return() *IProducerKafka_ProduceMessageAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *IProducerKafka_ProduceMessageAsync_Call) RunAndReturn(run func(kafka.TopicConfig, kafka.AsyncMessage)) *IProducerKafka_ProduceMessageAsync_Call {
	_c.Call.Return(run)
	return _c
}

// ProduceMessages provides a mock function with given fields: topicConfig, messages
func (_m *IProducerKafka) ProduceMessages(topicConfig kafka.TopicConfig, messages []kafka.Message) error {
	ret := _m.Called(topicConfig, messages)

	if len(ret) == 0 {
		panic("no return value specified for ProduceMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(kafka.TopicConfig, []kafka.Message) error); ok {
		r0 = rf(topicConfig, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IProducerKafka_ProduceMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceMessages'
type IProducerKafka_ProduceMessages_Call struct {
	*mock.Call
}

// ProduceMessages is a helper method to define mock.On call
//   - topicConfig kafka.TopicConfig
//   - messages []kafka.Message
func (_e *IProducerKafka_Expecter) ProduceMessages(topicConfig interface{}, messages interface{}) *IProducerKafka_ProduceMessages_Call {
	return &IProducerKafka_ProduceMessages_Call{Call: _e.mock.On("ProduceMessages", topicConfig, messages)}
}

func (_c *IProducerKafka_ProduceMessages_Call) Run(run func(topicConfig kafka.TopicConfig, messages []kafka.Message)) *IProducerKafka_ProduceMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kafka.TopicConfig), args[1].([]kafka.Message))
	})
	return _c
}

func (_c *IProducerKafka_ProduceMessages_Call) Return(_a0 error) *IProducerKafka_ProduceMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IProducerKafka_ProduceMessages_Call) RunAndReturn(run func(kafka.TopicConfig, []kafka.Message) error) *IProducerKafka_ProduceMessages_Call {
	_c.Call.Return(run)
	return _c
}

// ProduceMessagesAsync provides a mock function with given fields: topicConfig, messages
func (_m *IProducerKafka) ProduceMessagesAsync(topicConfig kafka.TopicConfig, messages []kafka.AsyncMessage) {
	_m.Called(topicConfig, messages)
}

// IProducerKafka_ProduceMessagesAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceMessagesAsync'
type IProducerKafka_ProduceMessagesAsync_Call struct {
	*mock.Call
}

// ProduceMessagesAsync is a helper method to define mock.On call
//   - topicConfig kafka.TopicConfig
//   - messages []kafka.AsyncMessage
func (_e *IProducerKafka_Expecter) ProduceMessagesAsync(topicConfig interface{}, messages interface{}) *IProducerKafka_ProduceMessagesAsync_Call {
	return &IProducerKafka_ProduceMessagesAsync_Call{Call: _e.mock.On("ProduceMessagesAsync", topicConfig, messages)}
}

func (_c *IProducerKafka_ProduceMessagesAsync_Call) Run(run func(topicConfig kafka.TopicConfig, messages []kafka.AsyncMessage)) *IProducerKafka_ProduceMessagesAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kafka.TopicConfig), args[1].([]kafka.AsyncMessage))
	})
	return _c
}

func (_c *IProducerKafka_ProduceMessagesAsync_Call) Return() *IProducerKafka_ProduceMessagesAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *IProducerKafka_ProduceMessagesAsync_Call) RunAndReturn(run func(kafka.TopicConfig, []kafka.AsyncMessage)) *IProducerKafka_ProduceMessagesAsync_Call {
	_c.Call.Return(run)
	return _c
}

// NewIProducerKafka creates a new instance of IProducerKafka. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProducerKafka(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProducerKafka {
	mock := &IProducerKafka{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
